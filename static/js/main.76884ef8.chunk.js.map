{"version":3,"sources":["components/navigation/Navigation.module.css","shared/components/Input/Input.module.css","components/buttons/Buttons.module.css","shared/components/Modal/Modal.module.css","components/settingsModal/SettingsModal.module.css","components/display/Display.module.css","components/pomodoroBuilderWrapper/pomodoroBuilderWrapper.module.css","shared/components/Backdrop/Backdrop.module.css","store/pomodoroSlice.js","components/navigation/Navigation.js","components/display/Display.js","shared/components/Input/validators.js","shared/components/Input/Input.js","components/settingsModal/SettingsModal.js","shared/hooks/form-hooks.js","containers/settingsContainer/SettingsContainer.js","components/pomodoroBuilderWrapper/pomodoroBuilderWrapper.js","components/buttons/Buttons.js","shared/components/Modal/Modal.js","shared/components/Backdrop/Backdrop.js","containers/pomodoroBuilder/PomodoroBuilder.js","App.js","reportWebVitals.js","store/store.js","index.js"],"names":["module","exports","pomodoroSlice","createSlice","name","initialState","timerSettings","session","shortBreak","longBreak","longBreakInterval","sessionTimeLeft","breakTimeLeft","sessionsToLongBreak","reducers","setTimerSettings","state","action","payload","value","setSessionTimeLeft","setBreakTimeLeft","setSessionsToLongBreak","decrementSessionTimeLeft","decrementBreakTimeLeft","decrementBreakInterval","pomodoroActions","actions","Navigation","breakIsActive","timerIsRunning","longBreakIsActive","turnOnBreakTabHandler","settingsOnHandler","turnOnBreakTab","className","classes","Navigation__Button","join","onClick","Navigation__icon","Display","currentBreakTime","currentSessionTime","Display__value","VALIDATOR_TYPE_REQUIRE","VALIDATOR_REQUIRE","type","VALIDATOR_MIN","val","VALIDATOR_MAX","validate","validators","isValid","validator","trim","length","inputReducer","isTouched","Input","props","useReducer","initialValue","initialValid","inputState","dispatch","id","onInput","useEffect","changeHandler","event","target","touchHandler","element","Input__textarea","rows","onChange","onBlur","Input__input","placeholder","Input__wrapper","Input__label","htmlFor","label","Input__error","errorText","SettingsModal","submitHandler","formState","inputHandler","modalOFF","onSubmit","SettingsForm__Form","inputs","break","SettingsForm__ButtonWrapper","Button","disabled","formReducer","formIsValid","inputId","SettingsContainer","useDispatch","initialInputs","initialFormValidity","useCallback","inputData","formValidity","useForm","saveSettingsHandler","settingsData","newSettings","formattedObject","Object","entries","key","objectValuesToNumber","Fragment","preventDefault","PomodoroBuilderWrapper","children","Buttons","resetButtonHandler","startButtonHandler","ButtonsWrapper","RestartButton","RestartButton__icon","Modal","background","modalOpen","modalName","style","opacity","transform","Modal__header","Modal__closeButton","Modal__X","Modal__contentWrapper","Backdrop","show","clicked","PomodoroBuilder","alarmSound","useRef","useState","timer","setTimer","setBreakIsActive","showSettings","setShowSettings","countdownIsRunning","setCountdownIsRunning","setLongBreakIsActive","useSelector","store","pomodoro","currentBreak","currentSession","interval","closeSettings","playSound","current","play","timeFormattedForDisplay","inSeconds","formatted","time","min","Math","floor","sec","clearInterval","isTrue","setInterval","countdown","ref","src","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","configureStore","reducer","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.76884ef8.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Navigation\":\"Navigation_Navigation__39n2F\",\"Navigation__Button\":\"Navigation_Navigation__Button__1zL85\",\"Navigation__Button--active\":\"Navigation_Navigation__Button--active__be9JY\",\"Navigation__Button--settings\":\"Navigation_Navigation__Button--settings__14FvA\",\"Navigation__Button--block\":\"Navigation_Navigation__Button--block__13Ra6\",\"Navigation__icon\":\"Navigation_Navigation__icon__1mht7\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Input\":\"Input_Input__1fo6G\",\"Input__wrapper\":\"Input_Input__wrapper__3lXQa\",\"Input__label\":\"Input_Input__label__3MdFB\",\"Input__input\":\"Input_Input__input__2hYp3\",\"Input__input--error\":\"Input_Input__input--error__1L9rF\",\"Input__error\":\"Input_Input__error__3sNGS\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"ButtonsWrapper\":\"Buttons_ButtonsWrapper__lDNb5\",\"RestartButton\":\"Buttons_RestartButton__1IXBy\",\"RestartButton--block\":\"Buttons_RestartButton--block__3HHbf\",\"RestartButton__icon\":\"Buttons_RestartButton__icon__1j1xh\",\"Button\":\"Buttons_Button__2kxCD\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Modal\":\"Modal_Modal__37xPW\",\"Modal__header\":\"Modal_Modal__header__1sDdA\",\"Modal__closeButton\":\"Modal_Modal__closeButton__2w3ai\",\"Modal__X\":\"Modal_Modal__X__2u7Is\",\"Modal__contentWrapper\":\"Modal_Modal__contentWrapper__2sJZ5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"SettingsForm\":\"SettingsModal_SettingsForm__2l_JB\",\"SettingsForm__ButtonWrapper\":\"SettingsModal_SettingsForm__ButtonWrapper__Np945\",\"SettingsModal__okButton\":\"SettingsModal_SettingsModal__okButton__1YFmG\",\"SettingsModal__Form\":\"SettingsModal_SettingsModal__Form__1B2Hx\",\"Button\":\"SettingsModal_Button__16KAO\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Display\":\"Display_Display__1YRvJ\",\"Display__value\":\"Display_Display__value__2Eges\",\"Display--break\":\"Display_Display--break__3EQ-4\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"PomodoroBuilderWrapper\":\"pomodoroBuilderWrapper_PomodoroBuilderWrapper__9oQhd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Backdrop\":\"Backdrop_Backdrop__1G_ea\"};","import { createSlice } from '@reduxjs/toolkit';\r\n\r\nconst initialState = { \r\n    timerSettings: {\r\n        session: .1,\r\n        shortBreak: .1,\r\n        longBreak: .2,\r\n        longBreakInterval: 2\r\n    },\r\n    sessionTimeLeft: .1*60,\r\n    breakTimeLeft: .1*60,\r\n    sessionsToLongBreak: 2\r\n };\r\n\r\nexport const pomodoroSlice = createSlice({\r\n    name: 'pomodoro',\r\n    initialState,\r\n    reducers: {\r\n        setTimerSettings(state, action) {\r\n            state.timerSettings = action.payload.value;\r\n        },\r\n        setSessionTimeLeft(state, action) {\r\n            state.sessionTimeLeft =  action.payload.value * 60;\r\n        },\r\n        setBreakTimeLeft(state, action) {\r\n            state.breakTimeLeft = action.payload.value * 60;\r\n        },\r\n        setSessionsToLongBreak(state, action) {\r\n            state.sessionsToLongBreak = action.payload.value;\r\n        },\r\n        decrementSessionTimeLeft(state) {\r\n            state.sessionTimeLeft -=  1;\r\n        },\r\n        decrementBreakTimeLeft(state) {\r\n            state.breakTimeLeft -=  1;\r\n        },\r\n        decrementBreakInterval(state) {\r\n            state.sessionsToLongBreak -= 1;\r\n        }\r\n    }\r\n})\r\n\r\nexport const pomodoroActions = pomodoroSlice.actions;\r\nexport default pomodoroSlice.reducer;\r\n","import React from 'react';\r\n\r\nimport classes from './Navigation.module.css';\r\n\r\nconst Navigation = ({breakIsActive, timerIsRunning, longBreakIsActive, turnOnBreakTabHandler, settingsOnHandler}) => {\r\n\r\n    const turnOnBreakTab = (value) => {\r\n        if (timerIsRunning) return;\r\n        turnOnBreakTabHandler(value);\r\n    }\r\n\r\n    const settingsOn = () => {\r\n        if (timerIsRunning) return;\r\n        settingsOnHandler();\r\n    }\r\n\r\n    return (\r\n        <div className={classes.Navigation}>\r\n\r\n            <button className={[classes.Navigation__Button, \r\n                                (!breakIsActive ? classes['Navigation__Button--active'] : null),\r\n                                (timerIsRunning ? classes['Navigation__Button--block'] : null)].join(' ')}\r\n                    onClick={() => turnOnBreakTab(false)}\r\n            >Session</button>\r\n\r\n            <button className={[classes.Navigation__Button, \r\n                                (breakIsActive ? classes['Navigation__Button--active'] : null),\r\n                                (timerIsRunning ? classes['Navigation__Button--block'] : null)].join(' ')}\r\n\r\n                    onClick={() => turnOnBreakTab(true)}\r\n            >{ longBreakIsActive ? 'Long Break' : 'Short Break' }</button>\r\n\r\n            <button className={[classes.Navigation__Button, \r\n                                classes['Navigation__Button--settings'], \r\n                                (timerIsRunning ? classes['Navigation__Button--block'] : null)].join(' ')}\r\n                    onClick={() => settingsOn()}>\r\n                <span className={['material-icons', classes.Navigation__icon].join(' ')}>settings</span>\r\n            </button>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Navigation;","import React from 'react';\r\n\r\nimport classes from './Display.module.css';\r\n\r\nconst Display = ({breakIsActive, currentBreakTime, currentSessionTime}) => {\r\n\r\n    const displayedValue = () => {\r\n        return breakIsActive ? currentBreakTime : currentSessionTime;\r\n    }\r\n\r\n    return (\r\n        <div className={classes.Display}>\r\n            <p className={classes.Display__value}>\r\n                { displayedValue() || '00:00' }\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Display;","const VALIDATOR_TYPE_REQUIRE = 'REQUIRE';\r\nconst VALIDATOR_TYPE_MIN = 'MIN';\r\nconst VALIDATOR_TYPE_MAX = 'MAX';\r\n\r\n\r\n// ACTIONS \r\nexport const VALIDATOR_REQUIRE = () => ({ type: VALIDATOR_TYPE_REQUIRE });\r\n\r\nexport const VALIDATOR_MIN = (val) => ({ type: VALIDATOR_TYPE_MIN, val: val});\r\n\r\nexport const VALIDATOR_MAX = (val) => ({ type: VALIDATOR_TYPE_MAX, val: val});\r\n\r\n// checker function\r\n\r\nexport const validate = (value, validators) => {\r\n    let isValid = true;\r\n    for (const validator of validators) {\r\n        if (validator.type === VALIDATOR_TYPE_REQUIRE) {\r\n            isValid = isValid && value.trim().length > 0;\r\n        }\r\n        if (validator.type === VALIDATOR_TYPE_MIN) {\r\n            isValid = isValid && +value >= validator.val\r\n        }\r\n        if (validator.type === VALIDATOR_TYPE_MAX) {\r\n            isValid = isValid && +value <= validator.val\r\n        }\r\n    }\r\n    return isValid;\r\n};","import React, {useReducer, useEffect} from 'react';\r\n\r\nimport {validate} from './validators';\r\n\r\nimport classes from './Input.module.css';\r\n\r\nconst inputReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case 'CHANGE':\r\n            return {\r\n                ...state,\r\n                value: action.val,\r\n                isValid: validate(action.val, action.validators)\r\n            };\r\n        case 'TOUCH': {\r\n            return {\r\n                ...state,\r\n                isTouched: true\r\n            }\r\n        }\r\n        default:\r\n            return state;\r\n    };\r\n};\r\n\r\nconst Input = props => { \r\n    const [inputState, dispatch] = useReducer ( inputReducer, {\r\n        value: props.initialValue || '',\r\n        isValid: props.initialValid || false,\r\n        isTouched: false\r\n    });\r\n\r\n    const { id, onInput } = props;\r\n    const { value, isValid } = inputState;\r\n\r\n    useEffect(() => {\r\n        onInput(id, value, isValid)\r\n    }, [id, value, isValid, onInput]);\r\n\r\n    const changeHandler = event => {\r\n        dispatch({\r\n            type: 'CHANGE', \r\n            val: event.target.value, \r\n            validators: props.validators\r\n        });\r\n    };\r\n\r\n    const touchHandler = () => {\r\n        dispatch({\r\n            type: 'TOUCH'\r\n        });\r\n    };\r\n\r\n    const element = props.element === 'textarea' ? (\r\n        <textarea\r\n            className={classes.Input__textarea}\r\n            id={props.id}\r\n            rows={props.rows || 2} \r\n            onChange={changeHandler}\r\n            onBlur={touchHandler}\r\n            value={inputState.value}\r\n        /> \r\n        ) : (\r\n        <input\r\n            className={`${classes.Input__input} ${(!inputState.isValid && inputState.isTouched) ? classes['Input__input--error'] : ''}`}\r\n            id={props.id}\r\n            type={props.type}\r\n            placeholder={props.placeholder}\r\n            onChange={changeHandler}\r\n            onBlur={touchHandler}\r\n            value={inputState.value} />\r\n        );\r\n\r\n    return (\r\n        <div className={classes.Input}>\r\n            <div className={classes.Input__wrapper}>\r\n                <label className={classes.Input__label} htmlFor={props.id}>{props.label}</label>\r\n                {element}\r\n                {!inputState.isValid && inputState.isTouched && <p className={classes.Input__error}>{props.errorText}</p>}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Input;","import React from 'react';\r\n\r\nimport Input from '../../shared/components/Input/Input';\r\nimport { VALIDATOR_MIN, VALIDATOR_MAX,  VALIDATOR_REQUIRE } from '../../shared/components/Input/validators';\r\n\r\nimport classes from './SettingsModal.module.css';\r\n\r\nconst SettingsModal = ({submitHandler, formState, inputHandler,modalOFF}) => {\r\n\r\n    return (\r\n        <form \r\n            onSubmit={submitHandler}\r\n            className={classes.SettingsForm__Form}>\r\n            <Input \r\n                id=\"session\"\r\n                label=\"Session:\"\r\n                type=\"number\"\r\n                validators={[VALIDATOR_REQUIRE(), VALIDATOR_MIN(0.1), VALIDATOR_MAX(120)]}\r\n                errorText=\"Please enter a valid session length (between 0.1 and 120)\"\r\n                onInput={inputHandler}\r\n                initialValue={formState.inputs.session.value}\r\n                initialValid={formState.inputs.session.isValid}/>\r\n            <Input \r\n                id=\"break\"\r\n                label=\"Short Break:\"\r\n                type=\"number\"\r\n                validators={[VALIDATOR_REQUIRE(), VALIDATOR_MIN(0.1), VALIDATOR_MAX(30)]}\r\n                errorText=\"Please enter a valid short break length (between 1 and 15)\"\r\n                onInput={inputHandler}\r\n                initialValue={formState.inputs.break.value}\r\n                initialValid={formState.inputs.break.isValid}/>\r\n            <Input \r\n                id=\"longBreak\"\r\n                label=\"Long break:\"\r\n                type=\"number\"\r\n                validators={[VALIDATOR_REQUIRE(), VALIDATOR_MIN(0.1), VALIDATOR_MAX(120)]}\r\n                errorText=\"Please enter a valid long break length (between 10 and 120)\"\r\n                onInput={inputHandler}\r\n                initialValue={formState.inputs.longBreak.value}\r\n                initialValid={formState.inputs.longBreak.isValid}/>\r\n            <Input \r\n                id=\"longBreakInterval\"\r\n                label=\"Long break interval:\"\r\n                type=\"number\"\r\n                validators={[VALIDATOR_REQUIRE(), VALIDATOR_MIN(2), VALIDATOR_MAX(10)]}\r\n                errorText=\"Please enter a valid long break interval (between 2 and 10)\"\r\n                onInput={inputHandler}\r\n                initialValue={formState.inputs.longBreakInterval.value}\r\n                initialValid={formState.inputs.longBreakInterval.isValid}/>\r\n\r\n            <div className={classes.SettingsForm__ButtonWrapper}>\r\n                <button type=\"button\"  className={classes.Button} onClick={modalOFF}>CANCEL</button>\r\n                <button type=\"submit\" className={classes.Button} disabled={!formState.isValid}>OK</button>\r\n            </div>\r\n\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default SettingsModal;","import {useCallback, useReducer } from 'react';\r\n\r\nconst formReducer = (state, action) => {\r\n    switch (action.type) {\r\n        case 'INPUT_CHANGE':\r\n            let formIsValid = true;\r\n            for (const inputId in state.inputs) {\r\n                if (inputId === action.inputId) {\r\n                    formIsValid = formIsValid && action.isValid;\r\n                } else {\r\n                    formIsValid = formIsValid && state.inputs[inputId].isValid;\r\n                }\r\n            }\r\n            return {\r\n                ...state,\r\n                inputs: {\r\n                    ...state.inputs,\r\n                    [action.inputId] : { value: action.value, isValid: action.isValid}\r\n                },\r\n                isValid: formIsValid\r\n            };\r\n        case 'SET_DATA':\r\n            return {\r\n                inputs: action.inputs,\r\n                isValid: action.formIsValid\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const useForm = (initialInputs, initialFormValidity) => {\r\n    const [formState, dispatch] = useReducer(formReducer, {inputs: initialInputs, isValid: initialFormValidity});\r\n\r\n    const inputHandler = useCallback((id, value, isValid) => {\r\n        dispatch({\r\n            type: 'INPUT_CHANGE',\r\n            value: value,\r\n            isValid: isValid,\r\n            inputId: id\r\n        });\r\n    }, []);\r\n\r\n    const setFormData = useCallback((inputData, formValidity) => {\r\n        dispatch({\r\n            type: 'SET_DATA',\r\n            inputs: inputData,\r\n            formIsValid:formValidity\r\n        });\r\n    }, []);\r\n\r\n    return [formState, inputHandler, setFormData];\r\n};","import React from 'react';\r\nimport { useDispatch } from 'react-redux';\r\n\r\nimport SettingsModal from '../../components/settingsModal/SettingsModal';\r\nimport { useForm } from './../../shared/hooks/form-hooks';\r\n\r\nimport { pomodoroActions } from './../../store/pomodoroSlice';\r\n\r\nconst SettingsContainer = ({modalOFF, timerSettings}) => {\r\n    const dispatch = useDispatch();\r\n\r\n    const [formState, inputHandler] = useForm({\r\n        session: {\r\n            value: timerSettings.session || 25,\r\n            isValid: true\r\n        },\r\n        break: {\r\n            value: timerSettings.shortBreak || 5,\r\n            isValid: true\r\n        },\r\n        longBreak: {\r\n            value: timerSettings.longBreak || 15,\r\n            isValid: true\r\n        },\r\n        longBreakInterval: {\r\n            value: timerSettings.longBreakInterval || 2,\r\n            isValid: true\r\n        }\r\n    }, false);\r\n\r\n    const saveSettingsHandler = (settingsData) => {\r\n        const newSettings = objectValuesToNumber(settingsData);\r\n        dispatch(pomodoroActions.setTimerSettings({value: newSettings}));\r\n\r\n        modalOFF();\r\n    }\r\n\r\n    const submitHandler = event => {\r\n        event.preventDefault();\r\n\r\n        saveSettingsHandler({\r\n            session: formState.inputs.session.value,\r\n            shortBreak: formState.inputs.break.value,\r\n            longBreak: formState.inputs.longBreak.value,\r\n            longBreakInterval: formState.inputs.longBreakInterval.value,\r\n        })\r\n    }\r\n\r\n    function objectValuesToNumber (settingsData) {\r\n        const formattedObject = {};\r\n        for ( const[key, value] of Object.entries(settingsData)) {\r\n            formattedObject[key] = +value;\r\n        }\r\n        return formattedObject;\r\n    }\r\n    \r\n    return (\r\n        <React.Fragment>\r\n            <SettingsModal\r\n                submitHandler={submitHandler}\r\n                formState={formState}\r\n                inputHandler={inputHandler}\r\n                modalOFF={modalOFF}/>\r\n        </React.Fragment>\r\n    )\r\n};\r\n\r\nexport default SettingsContainer;\r\n","import React from 'react';\r\n\r\nimport classes from './pomodoroBuilderWrapper.module.css';\r\n\r\nconst PomodoroBuilderWrapper = (props) => {\r\n    return (\r\n        <div className={classes.PomodoroBuilderWrapper}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PomodoroBuilderWrapper;\r\n","import React from 'react';\r\n\r\nimport classes from './Buttons.module.css';\r\n\r\nconst Buttons = ({timerIsRunning, resetButtonHandler, startButtonHandler}) => {\r\n    \r\n    const clickHandler = () => {\r\n        if( !timerIsRunning ) resetButtonHandler();\r\n    }\r\n\r\n    return (\r\n        <div className={classes.ButtonsWrapper}>\r\n            <button className={[classes.RestartButton, (timerIsRunning ? classes['RestartButton--block'] : null)].join(' ')}\r\n                    onClick={clickHandler}\r\n            >\r\n                <span className={['material-icons', classes.RestartButton__icon].join(' ')}>restart_alt</span>\r\n            </button>\r\n            \r\n            <button className={classes.Button}\r\n                    onClick={startButtonHandler}\r\n            >{ timerIsRunning ? 'Stop' : 'Start' }\r\n            </button>\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default Buttons;","import React from \"react\";\r\n\r\nimport classes from \"./Modal.module.css\";\r\n\r\nconst Modal = ({background, modalOpen, modalName, modalOFF, children}) => {\r\n\r\n  // Props:\r\n  //  modalOpen, modalName, modalOFF\r\n    \r\n  return (\r\n    <div\r\n        className={classes.Modal}\r\n        style={{\r\n            background: background,\r\n            opacity: modalOpen ? 1 : 0,\r\n            transform: modalOpen ? \r\n            'translate(-50%, -50%)' : 'translate(-50%, -200vh)'}}>\r\n            \r\n        <div className={classes.Modal__header}>\r\n            <p>{modalName}</p>\r\n            <div\r\n                className={classes.Modal__closeButton}\r\n                onClick={modalOFF}>\r\n                    <div className={classes.Modal__X}></div>\r\n            </div>\r\n        </div>\r\n\r\n        <div className={classes.Modal__contentWrapper}>\r\n            {children}\r\n        </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Modal;","import React from 'react';\r\n\r\nimport classes from './Backdrop.module.css';\r\n\r\nconst Backdrop = ({show, clicked}) => {\r\n    return (\r\n        show ? <div \r\n            className={classes.Backdrop}\r\n            onClick={clicked}></div> \r\n            : null\r\n    )\r\n}\r\n\r\nexport default Backdrop;","import React, {useState, useEffect, useRef} from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport { pomodoroActions } from './../../store/pomodoroSlice';\r\n\r\nimport Navigation from '../../components/navigation/Navigation';\r\nimport Display from '../../components/display/Display';\r\nimport SettingsContainer from '../settingsContainer/SettingsContainer';\r\nimport PomodoroBuilderWrapper from '../../components/pomodoroBuilderWrapper/pomodoroBuilderWrapper';\r\nimport Buttons from '../../components/buttons/Buttons';\r\nimport Modal from './../../shared/components/Modal/Modal';\r\nimport Backdrop from './../../shared/components/Backdrop/Backdrop';\r\n\r\nconst PomodoroBuilder = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    const alarmSound = useRef();\r\n\r\n    const [timer, setTimer] = useState(null);\r\n    const [breakIsActive, setBreakIsActive] = useState(false);\r\n    const [showSettings, setShowSettings] = useState(false);\r\n    const [countdownIsRunning, setCountdownIsRunning] = useState(false);\r\n    const [longBreakIsActive, setLongBreakIsActive] = useState(false);\r\n\r\n    const timerSettings = useSelector(store => store.pomodoro.timerSettings);\r\n    const currentBreak = useSelector(store => store.pomodoro.breakTimeLeft);\r\n    const currentSession = useSelector(store => store.pomodoro.sessionTimeLeft);\r\n    const interval = useSelector(store => store.pomodoro.sessionsToLongBreak);\r\n\r\n    useEffect(() => {\r\n        const {session, shortBreak, longBreakInterval } = timerSettings;\r\n        dispatch(pomodoroActions.setSessionTimeLeft({value: session}));\r\n        dispatch(pomodoroActions.setBreakTimeLeft({value: shortBreak}));\r\n        dispatch(pomodoroActions.setSessionsToLongBreak({value: longBreakInterval}));\r\n        setBreakIsActive(false);\r\n        setLongBreakIsActive(false);\r\n    }, [timerSettings, dispatch])\r\n\r\n    const turnOnBreakTab = (isTrue) => setBreakIsActive(isTrue);\r\n\r\n    const openSettings = () => setShowSettings(true);\r\n    const closeSettings = () => setShowSettings(false);\r\n    \r\n    const resetCurrentTabTime = () => {\r\n        if (breakIsActive) {\r\n            if (interval === 1) {\r\n                dispatch(pomodoroActions.setBreakTimeLeft({value: timerSettings.longBreak}))\r\n            } else {\r\n                dispatch(pomodoroActions.setBreakTimeLeft({value: timerSettings.shortBreak}))\r\n            }\r\n        } else {\r\n            dispatch(pomodoroActions.setSessionTimeLeft({value: timerSettings.session}))\r\n        }\r\n    }\r\n\r\n    const startButtonHandler = () => {\r\n        if (countdownIsRunning) {\r\n            clearInterval(timer);\r\n            setCountdownIsRunning(false);\r\n        } else {\r\n            countdown();\r\n            setCountdownIsRunning(true);\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (timeFormattedForDisplay(currentSession) === '00:00') {\r\n            playSound();\r\n            dispatch(pomodoroActions.decrementBreakInterval());\r\n            setCountdownIsRunning(false);\r\n            clearInterval(timer);\r\n            setBreakIsActive(true);\r\n            dispatch(pomodoroActions.setSessionTimeLeft({value: timerSettings.session}));\r\n        }\r\n    }, [currentSession, dispatch])\r\n\r\n    useEffect(() => {\r\n        if (timeFormattedForDisplay(currentBreak) === '00:00') {\r\n            playSound();\r\n            setCountdownIsRunning(false);\r\n            clearInterval(timer);\r\n\r\n            if (interval > 1) {\r\n                setLongBreakIsActive(false);\r\n                dispatch(pomodoroActions.setBreakTimeLeft({value: timerSettings.shortBreak}));\r\n            } else if (interval === 1) {\r\n                setLongBreakIsActive(true);\r\n                dispatch(pomodoroActions.setBreakTimeLeft({value: timerSettings.longBreak}));\r\n            } else if (interval <= 0) {\r\n                setLongBreakIsActive(false);\r\n                dispatch(pomodoroActions.setSessionsToLongBreak({value: timerSettings.longBreakInterval}));\r\n                dispatch(pomodoroActions.setBreakTimeLeft({value: timerSettings.shortBreak}));\r\n            }\r\n            setBreakIsActive(false);\r\n        }\r\n    }, [currentBreak, dispatch])\r\n\r\n    useEffect(()=>{\r\n        return () => {\r\n            clearInterval(timer);\r\n        }\r\n    }, [timer])\r\n\r\n    function playSound () {\r\n        alarmSound.current.play();\r\n    }\r\n\r\n    function countdown () {\r\n        const timer = setInterval(() => {\r\n            if (breakIsActive) {\r\n                dispatch(pomodoroActions.decrementBreakTimeLeft());\r\n            } else {\r\n                dispatch(pomodoroActions.decrementSessionTimeLeft());\r\n            }\r\n        }, 1000);\r\n        setTimer(timer);\r\n    }\r\n\r\n    function timeFormattedForDisplay (inSeconds) {\r\n        const formatted = (time) => time < 10 ? `0${time}` : `${time}`;\r\n        const min = Math.floor( inSeconds / 60 );\r\n        const sec = inSeconds % 60;\r\n\r\n        return `${formatted(min)}:${formatted(sec)}`;\r\n    }\r\n\r\n    return (\r\n        <PomodoroBuilderWrapper>\r\n            <Backdrop show={showSettings} clicked={closeSettings}/>\r\n            <Modal modalOpen={showSettings} modalOFF={closeSettings} modalName=\"Settings\">\r\n                <SettingsContainer \r\n                    modalOFF={closeSettings}\r\n                    timerSettings={timerSettings}/>\r\n            </Modal>\r\n            <Navigation\r\n                longBreakIsActive={longBreakIsActive} \r\n                timerIsRunning={countdownIsRunning}\r\n                breakIsActive={breakIsActive}\r\n                turnOnBreakTabHandler={turnOnBreakTab}\r\n                settingsOnHandler={openSettings}/>\r\n            <Display \r\n                breakIsActive={breakIsActive}\r\n                currentBreakTime={timeFormattedForDisplay(currentBreak)}\r\n                currentSessionTime={timeFormattedForDisplay(currentSession)}/>\r\n            <Buttons\r\n                timerIsRunning={countdownIsRunning}\r\n                resetButtonHandler={resetCurrentTabTime}\r\n                startButtonHandler={startButtonHandler}/>\r\n            <audio ref={alarmSound} >\r\n                <source src=\"/sounds/mixkit-unlock-game-notification-253.wav\" />\r\n            </audio>\r\n        </PomodoroBuilderWrapper>\r\n    )\r\n}\r\n\r\nexport default PomodoroBuilder;\r\n","import PomodoroBuilder from './containers/pomodoroBuilder/PomodoroBuilder';\n\nfunction App() {\n  return (\n    <PomodoroBuilder />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { configureStore } from '@reduxjs/toolkit';\r\n\r\nimport pomodoroSlice from './pomodoroSlice';\r\n\r\nconst store = configureStore({\r\n    reducer: { pomodoro: pomodoroSlice }\r\n})\r\n\r\nexport default store;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { Provider } from 'react-redux';\n\nimport store from './store/store';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}